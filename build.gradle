buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
		classpath "gradle.plugin.se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.66"
    }
}

plugins {
	id "com.matthewprenger.cursegradle" version "1.4.0"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: "se.bjurr.gitchangelog.git-changelog-gradle-plugin"

String semver = "${version_major}.${version_minor}.${version_patch}"
version = "${semver}.${getBuildNumber()}"
if (project.hasProperty('buildQualifier')) {
	version = project.version + '-' + project.buildQualifier
}
group = "net.sengir.forestry" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "forestry_" + mcversion

ext.dirDest = './build/dist'

// java version
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
compileJava.sourceCompatibility = JavaVersion.VERSION_1_8
compileJava.targetCompatibility = JavaVersion.VERSION_1_8

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

minecraft {
	mappings channel: 'official', version: mcp_mappings

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                forestry {
                    source sourceSets.main
                }
            }

			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                forestry {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'forestry', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                forestry {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
	main {
		resources {
			srcDirs "src/generated/resources"
			exclude '.cache'
		}
	}
}

repositories {
	/*maven {
		url = 'http://maven.mcmoddev.com'
	}*/
	maven {
		name 'JEI'
		url "http://dvs1.progwml6.com/files/maven"
	}
	/*maven {
		name = "ic2"
		url = "http://maven.ic2.player.to/"
	}
	maven {
		name = "Modmuss50"
		url = "http://maven.modmuss50.me"
	}
	maven {
		url = 'https://mod-buildcraft.com/maven'
	}*/

	maven { url 'https://maven.blamejared.com' }
}

dependencies {
	minecraft "net.minecraftforge:forge:${forgeversion}"

	/*deobfProvided "net.darkhax.tesla:Tesla-${tesla_mcversion}:${tesla_version}"*/
	compileOnly fg.deobf("mezz.jei:jei-${jei_mcversion}:${jei_version}:api")

	runtimeOnly fg.deobf("mezz.jei:jei-${jei_mcversion}:${jei_version}")

	compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
	runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

	/*deobfProvided "net.industrial-craft:industrialcraft-2:${ic2_version}:api"
	deobfProvided "TechReborn:TechReborn-${TR_mcversion}:${TR_version}:api"
	deobfProvided "com.mod-buildcraft:buildcraft-api:${buildcraft_version}"*/
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

configurations {
	api
	compile.extendsFrom api
}

// prevent java 8's strict doclint for javadocs from failing builds
if (JavaVersion.current().isJava8Compatible()) {
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

jar {
	from sourceSets.main.output.classesDirs
	from sourceSets.main.output.resourcesDir

	manifest {
		attributes([
            "Specification-Title": "Forestry",
            "Specification-Vendor": "SirSengir",
            "Specification-Version": "${semver}",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"SirSengir",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"FMLAT": 'forestry_at.cfg'
        ])
	}
}

task sourcesJar(type: Jar) {
	// from zipTree('build/retromapping/retromappedReplacedMain.jar') // Not sure if this is how Abrar designed it, but grab the remapped src
	classifier = 'sources'
}

task apiJar(type: Jar) {
	// TODO: when FG bug is fixed, remove allSource from the api jar.
	// https://github.com/MinecraftForge/ForgeGradle/issues/369
	// Gradle should be able to pull them from the -sources jar.
	from sourceSets.main.allSource
	from sourceSets.main.output
	include 'forestry/api/**'
	classifier = 'api'
}

jar.finalizedBy('reobfJar')

artifacts {
	archives sourcesJar
	archives apiJar
}

uploadArchives {
	repositories {
		if (project.hasProperty('mavenDir')) {
			mavenDeployer {
				repository(url: "file://" + mavenDir)
			}
		} else {
			println 'Archives upload disabled, mavenDir in gradle.properties is missing.'
		}
	}
}

def getBuildNumber() {
	return "$System.env.BUILD_NUMBER" != "null" ? "$System.env.BUILD_NUMBER" : "0"
}

task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
	file = new File("changelog.html")
	untaggedName = "Current release ${project.version}"
	fromCommit = "5a3850c2642e535656d090d1473054d5fa8d3331"
	toRef = "HEAD"
	templateContent = file('changelog.mustache').getText('UTF-8')
}

idea {
	module {
		for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
			File excludeDir = new File(projectDir, excludeDirName)
			excludeDirs.add(excludeDir)
		}
	}
}

curseforge {
	apiKey = project.hasProperty('curseforge_apikey') ? project.curseforge_apikey : '0'
	project {
		id = curse_project_id
		changelog = file('changelog.html')
		changelogType = 'html'
		releaseType = 'beta'
	}
}

afterEvaluate {
	tasks.curseforge59751.dependsOn.add(makeChangelog)
}
